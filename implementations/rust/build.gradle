project.buildDir = java.nio.file.Paths.get('..', '..', 'target');

ext {
  mode = project.hasProperty('mode') ? mode.toLowerCase() : 'debug'

  cargo = { String... arguments ->
    command = ['cargo']
    command.addAll(arguments)

    if (command.contains('build') && mode == 'release') { command.add('--release') }

    println "[Gradle] Command: ${command.join(' ')}"
    return command
  }
}

task lint {
  group project.name
  description 'Lint the project.'

  doLast {
    exec { commandLine cargo('fmt', '--all', '--', '--check') }
    exec { commandLine cargo('clippy', '--no-deps', '--', '-D', 'warnings') }
    exec { commandLine cargo('doc', '--no-deps') }
    exec { commandLine cargo('deny', '--manifest-path=../../Cargo.toml', 'check', 'licenses', 'advisories') }
  }
}

task build {
  group project.name
  description 'Build the project.'

  dependsOn lint
  doLast {
    exec { commandLine cargo('--locked', 'build') }
    exec { commandLine cargo('--locked', 'build', '--examples') }
  }
}

task test {
  group project.name
  description 'Test the project.'

  doLast {
    exec { commandLine cargo('--locked', 'test') }
  }
}

task clean {
  group project.name
  description 'Clean the project.'

  doLast {
    exec { commandLine cargo('clean') }
  }
}

task veryClean {
  group project.name
  description 'Clean the project.'

  doLast {
    println "[Gradle] Very Clean: ${buildDir}"
    delete buildDir
  }
}
